from utils import *
from collections import deque


data="""#######
#a.#Cd#
##@#@##
#######
##@#@##
#cB#.b#
#######"""

data2= """#########
#@#@#@AB#
#a#b###c#
#########"""


data2="""########
#@....a#
########
#@A...b#
########"""

data= """###############
#d.ABC.#.....a#
######@#@######
###############
######@#@######
#b.....#.....c#
###############"""

data="""#############
#DcBa.#.GhKl#
#.###@#@#I###
#e#d#####j#k#
###C#@#@###J#
#fEbA.#.FgHi#
#############"""


data="""#############
#g#f.D#..h#l#
#F###e#E###.#
#dCba@#@BcIJ#
#############
#nK.L@#@G...#
#M###N#H###.#
#o#m..#i#jk.#
#############"""

data="""#################################################################################
#...........#.............#...#.....#...#...............#.....#.....#....t#.....#
#.#####.###.###.#########.#.#.#.#.###.#.#.#####.#######.#.###.#.###.#.###.#.#.#.#
#..m#.#...#...#...#...#...#.#...#.....#.#.....#...#...#...#...#...#...#...#.#.#.#
###.#.###.###.###.###.#.#######.#######.#######.#.#.#.#####.#####.#####.###.#.#.#
#.#...#...#.#...#...#.#.#.....#.#.......#.....#.#...#.....#.#...#...#.#...#.#.#.#
#.###.#.###.###.###.#.#.#.###.#.#.#####.#.###.###########.#.#.#.###.#.###.#.#.#.#
#.#...#.#.....#.....#.#...#.#.#.#.#.#...#...#...B.........#...#.J.#.#...#.#.#.#.#
#.#.###.###.#########.#####.#.###.#.#.#####.#####################.#.###.#.###.#.#
#.#...#.#...#.........#...#.#...#.#.#.#.#...#.............#...#...#.#...#....v#.#
#.###.#.#.###.#####.#.#.#.#.###.#.#.#.#.#.###.###########.#.#.#.###.#.#########P#
#.#...#.#.....#.#...#...#.#...#...#.#.#.#...#.....#...#...#.#...#w..#.#...#.....#
#V#.###.#.#####.#.#######.#.#.#####.#.#.#.#.#####.#.#.#.###.#####.###.#.#.#.#####
#...#...#.....#.#.#.......#.#.......#.#.#.#.#.....#.#.#.#.#.#...#.#...#.#.#.....#
#####.#######.#.#.#######.###.#####.#.#.#.#.#.#####.#.#.#.#.###.#.#.###.#.#####.#
#...#...#.......#.......#.....#.....#.#.#.#.#...#...#.....#.....#.#.#...#...#...#
#.#.###.###.#######.###.#######.#####.#.#.#N#.#.#########.###.###.#.#.###.###.###
#.#...#...#.#.....#...#.#...#.#.....#...#.#.#.#...#.....#.#...#...#...#.#...#.#.#
#.###.###.###.###.###.#.#.#.#.###.#####.###.#.###.#.###.###.###.###.###D###.#.#.#
#.#.......#...#.#...#.#...#.#.....#...#.#...#.#...#...#.#...#...#.#.#.....#.#...#
#.#######.#.###.###.###.###.#######.#.#.#.###.#.#####.#.#.###.###.#.#.###.#.###.#
#.T.#.....#.#.....#...#...#.........#...#.#...#.....#.#.....#.#...#.#.#...#.....#
###.#.#####.#.#.#########.###############.#########.#.###########.#.#.###########
#.#.#...#...#.#.........#...#.........#.#...#.....#.....#.........#.#...........#
#.#.#####.###.#####.#######.#######.#.#.###.#.###.#######.#####.###.#####.#######
#.#......l#.#.....#.......#.........#...#...#.#.#.#.....#...#.#...#.....#...#...#
#.#########.#.#########.#.#############.#.###.#.#.#.###.###.#.###.#####.#.#.#.#.#
#.....#.....#.#...#...#.#...#.......#..z#.....#.#...#.....#.#...#.......#.#...#.#
#.###.#.###.#.#.#.#.#.###.#.#.###.#.#.###.#####.#####.#####.#.#.#########.#####.#
#...#.#.#.#...#.#.#.#...#.#.#.#...#.#...#.#.........#.....#...#.#...#.....#.....#
###.###.#.#####.#.#.###.#.#.###.#.#####.#.#######.#.#####.#####.#.#.#.#####.###.#
#...#..d#.#...#.#.#...#...#...#.#.#.....#.....#...#.....#.....#...#.#...#q..#.#.#
#.#.#.###.#.#.#.#.###.#######.#.#.#.#########.#.###########.#.#####.#####.###.#.#
#.#.#...#.#.#...#.#...#.........#.#.#...#.#...#...........#.#.....#...#...#...#.#
#.#####.#.#.#####.#.#######.#######.#.###.#.###.#########.#.#####.###.#.#####.#.#
#.......#.#...#...#.#.....#.#.......#...#.#.#.....#.....#.#...#...#...#.....#...#
#.#######.###.###.#.#.###.###.#######.#.#.#.#####.#.#####.###.#####.#######.#####
#.......#...#...#...#.#.#...#.#...#...#.#.#.#...#...#...#...#.....#.#.....#.....#
#######.#.#.###.#####.#.###.#.#.#.#####.#.#.#.#.#####.#.###.#####.#.#.###.#####.#
#.........#...#...........#.....#......@#@....#....c..#.........#.....#.........#
#################################################################################
#...........#.........#.C.........#....@#@....#.........#.....................X.#
#Q#########.#.#.#####.#.#########.#.###.#.###.#.#######.#.###############.#####.#
#.#.........#.#...#.#...#.......#.#.#.#.#...#.....#...#.#.....#.#.......#...#...#
#.#####.#########.#.#####.#####.#.#.#.#.###.#######.#.#.#####.#.#.#####.#.###.#.#
#.....#.#.....#...#.....#.#...#.#...#.#.#.#.#...#...#...#.....#.#.#.....#.#u..#.#
#.###.#U#.###.#.#####.###.#.###.#####.#.#.#.###.#.#.#####.#####.#.#.#######.###.#
#j..#.#...#...#.....#.#...#...#.....#.#.#.#.....#.#.#.....#.....#.#.........#...#
###.#.#####.#######.#.#.#####.###.#.#.#.#.#####.#.###.#####.###.#.#####.#######.#
#...#.....#.....#...#.#...#...#...#.#.#.#...#...#.....#.....#...#.#...#.#.....#.#
#######.#.#####.#.###.###.#.#.#.###.#.#.###.#.#########.#####.###.#.#.###.###.###
#.....#.#...#.#.#.#.....#.#.#.#.#.....#.#...#.#.....#...#.....#.#...#.......#...#
#.###.#.###.#.#.#.###.#.#.#.#.#.#######.#.###.###.#.###.#.#####.###########.###.#
#f#.#.#.#...#.#.#...#.#.#b#.#.#.#.......#.#...#...#.#...#.....#...#.....#...#...#
#.#.#.###.###.#.###.#.#.#.#.###.#.#######.#.###.###.#.#######.###.#.###.#####.#.#
#.#.......#...#.#...#.#...#...#...#.....#...#...#.....#...........#.#.#.#.....#.#
#.#########.#.#.#.###.#######.#######.###.###.#.#######.###########.#.#.#.#####.#
#.....#.....#.....#....x....#.......#...#n#...#.#.....#.....#.....#.#.#.F.#...#.#
#.###.#####.###############.###.###.###.#.###.###.###.#######.###.#.#.#####.###.#
#...#.....#.#r..........#.#.....#.#...#.#.....#...#...........#...#.#.#.........#
#.#######.###.#########R#.#######.###.#.#####.#.###.###########.###K#.#.#########
#.#.......#...#....g#...#.........#...#.#.....#.#...#.......#.#.....#.#...#.....#
#.#.#######.#######.#####.#.#######.###.#.#####.#.###.#####.#.#######.###.#.#.###
#.#...#...#...#.....#.....#.......#...#.#...#.#.#.#...#...#.#.#.#...#.....#.#...#
#.###.#.#.###G#.###I#.###########.###.#.###.#.#.#.#.#####.#.#.#.#.#.#.#####.###.#
#k#...#.#...#...#...#.....#s....#.#...#.#...#.#.#.#.......#...#...#.#.#.#...#.L.#
###.#.#.###.#####.#######.#.###O#.#.###.#.###.#.#.#######.#####.###.#.#.#.###.#.#
#..p#.#...#.....#.......#.#.#...#.#.....#.Z...#.#...#...#.#...#.#.#...#.#...#.#.#
#.###.###.###.#########.###.#.###.#####.#######.###.###.#.#.#.#.#.#####.###.#.###
#.#.#...#...#.......#..i#...#...#.#.....#.....#.#.#.....#.#.#...#....a....#.#...#
#.#.###.#.#######.#.#H###.#####.#.#.#####.###.#.#.#.#####.#.#####.#.#######.###.#
#.#.....#.#.....#.#.#.#...#o....#.#.#...#...#...#...#.....#.#...E.#.#......y..#.#
#.#######.#.###.###.#.#S#####.###.#.###.#.#.###.#####W#####.#.#.###.#.#########.#
#.#.......#.#.......#.#.....#.A.#.....#.#.#.#...#...#...#...#.#.#...#.#...#.....#
#.#.#######.#######.#.#####.###.#####.#.###.#.###.#.###.#.###.#.#####.###.#.###.#
#.#...#...#.#.Y.#...#..h....#.#...#.#.#.#...#...#.#.....#.#...#...........#...#.#
#.###.#.#.#.#.#.#############.###.#.#.#.#.###.###.#######.#############.#####.#.#
#...#...#.#...#...........#.......#.#.#.#.#...#...#.....#...#.........#.#.....#.#
#.#.#####.###########.#####.#######.#.#.#.#####.###.#######.#.#######.###.#####.#
#.#.....M...........#e......#...........#.......#.............#...........#.....#
#################################################################################"""
mapp = {}
width = 0
height = 0
all_keys=set()
places_by_name = {}
places_by_loc = {}
robots = []

def get_place(name, loc):
    if name in places_by_name:
        if places_by_name[name] == places_by_loc[loc]:
            return places_by_name[name]
        raise Exception("loc doesn't match name")
    return Place(name,loc)


class Place(object):
    def __init__(self, name, loc):
        self.name=name
        self.loc=loc
        places_by_name[name] = self
        places_by_loc[loc] = self
        self.links = []

    def add_neigh(self, other_place, steps_to_get_there, keys_needed):
        self.links.append((other_place, steps_to_get_there, keys_needed))
        
    def __repr__(self):
        a = "\nLinks:\n"
        for link in self.links:
            a +=link[0].name + " Steps:"+str(link[1])+" Keys:"+str(link[2])+"\n"
        return self.name + str(self.loc) + a
        

starts=0
for x,lin in enumerate(data.split("\n")):
    height=x+1
    for y, char in enumerate(lin):
        width=y+1
        mapp[Point(x, y)] = char
        if char == "@": # start
            starts+=1
            p =get_place("Start "+str(starts), Point(x, y))
            robots.append(p)
        elif char in LETTERS: # key
            all_keys.add(char)
            get_place(char, Point(x, y))
        elif char in UPPER_LETTERS: # door
            get_place(char, Point(x, y))
        



for loc, place in places_by_loc.items():
    visited = set()
    to_visit = deque()
    to_visit.append((loc,0, set()))
    while to_visit:
        n,steps,keys_needed = to_visit.pop()
        visited.add(n)
        for d in DIRS_4:
            to_look_at = n+d
            these_keys_needed = keys_needed.copy()
            if to_look_at in visited:
                continue
            if mapp[to_look_at] == "#":
                continue
            if mapp[to_look_at] in UPPER_LETTERS:
                these_keys_needed.add(mapp[to_look_at].lower())
            if to_look_at in places_by_loc:
                place.add_neigh(places_by_loc[to_look_at],steps+1, these_keys_needed)
            to_visit.append((to_look_at,steps+1, these_keys_needed))



class State():
    def __init__(self,robots, steps, keys_got, seen_places, history):
        self.robots = robots
        
        self.steps = steps
        self.keys_got = keys_got
        self.seen_places = seen_places
        self.history=history

    def is_finished(self):
        return self.keys_got == all_keys

    def copy(self):
        
        return State([a for a in self.robots],
                     self.steps,
                     {a for a in self.keys_got},
                     {a for a in self.seen_places},
                     [a for a in self.history])
        
    def move_robot(self,robot_index,  next_place, extra_steps):

        s = self.copy()
        s.history.append("Robot "+str(robot_index)+ " moved from "+ s.robots[robot_index].name+" to "+next_place.name)
        s.robots[robot_index] = next_place

        s.steps+=extra_steps

        s.seen_places.add(next_place)
        if next_place.name in LETTERS:
            s.keys_got.add(next_place.name)
        return s

    def hash_string(self):
        return str([r.name for r in self.robots])+str(sorted(self.keys_got))


    def get_point(self,x,y):
        p=Point(x,y)
        for r in self.robots:
            if r.loc==p:
                return "£"
        for pl in self.seen_places:
            if pl.loc == p:
                return "."
        
        char = mapp[p]
        if char.lower() in self.keys_got:
            char="."
        return char
        
    def draw(self):
        return
        print("------------------START--------------------------")
        for x in range(height):
            print("".join(self.get_point(x,y) for y in range(width)))
        print(self.steps)
        print(self.keys_got)
        for h in self.history:
            print(h)
        print("------------------END--------------------------")
        


states_to_look_at = deque()
states_to_look_at.append(State(robots, 0, set(), set(),[]))
finished_states=set()
seen_states = {}
while states_to_look_at:
    state = states_to_look_at.pop()
    state.draw()
   #input()
   # print(state.hash_string())
    
    if state.is_finished():
        finished_states.add(state)
        continue

    
    #todo check if we've been in this state before with a lower steps
    if state.hash_string() in seen_states:
        #print("Seen before!")
        #print (seen_states[state.hash_string()],state.steps)
        if seen_states[state.hash_string()]<=state.steps:
            continue
    seen_states[state.hash_string()]=state.steps
    
    #print(state.robots)
    for i, robot_place in enumerate(state.robots):
        #find where it can go
        for next_place, steps_to_get_there, keys_needed in robot_place.links:
            if next_place in state.seen_places:
                continue
            if next_place.name in UPPER_LETTERS:
                continue
            if mapp[next_place.loc] == "@":
                continue
            if len(keys_needed - state.keys_got)>0:
                continue
            next_state = state.move_robot(i,next_place, steps_to_get_there)
            states_to_look_at.append(next_state)
            
            
        
print("#######")
print(min(a.steps for a in finished_states))

